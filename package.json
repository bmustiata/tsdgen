{
  "name": "tsdgen",
  "description": "A .d.ts generator for Node.js from other .d.ts files. Creates a module definition for all the classes exported via @inmodule JsDoc annotation.",
  "author": {
    "name": "Bogdan Mustiata",
    "email": "bogdan.mustiata@gmail.com"
  },
  "version": "0.1.0",
  "dependencies": {
    "colors": "^1.1.2",
    "doctrine": "^0.6.4",
    "nomnom": "^1.8.1"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-clean": "^0.6.0",
    "grunt-sync": "^0.2.3",
    "grunt-typescript": "^0.6.2"
  },
  "keywords": [],
  "bin": {
    "tsdgen": "lib/launcher.js"
  },
  "main": "./lib/tsdgen.js",
  "bugs": {
    "url": "https://github.com/bmustiata/tsdgen/issues"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "https://github.com/bmustiata/tsdgen/blob/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/bmustiata/tsdgen.git"
  },
  "readme": "# tsdgen\nParses multiple `.d.ts` definition files and outputs node ready\ndefinitions.\n## Usage\nUse A JsDoc annotation that specifies in what module the interface or class is exported.\n```typescript\n/**\n * Class that does this and that.\n * @inmodule \"best-module-of-all-times\"\n */\nexport class BestClass {\n   // ...\n}\n```\nCompile this file (or all the files that export classes) with `-d` in tsc,\nthen post process the .d.ts files in order to get the final module .d.ts.\nFor example in [terminal-console](https://github.com/bmustiata/terminal-console/#terminal-console) the \n[TerminalConsole](https://github.com/bmustiata/terminal-console/blob/master/src/main/core/TerminalConsole.ts) class has the `@inmodule` annotation:\n```typescript\n/**\n * A class that allows relogging the previously written message by using the\n * ANSI up code.\n * @inmodule \"terminal-console\"\n */\nexport class TerminalConsole {\n```\nWhen processing all the generated `.d.ts` files from the lib/ file, the [terminal-console.d.ts](https://github.com/bmustiata/terminal-console/blob/master/terminal-console.d.ts) will contain only this exported class, in the right module. Multiple modules could be specified for the same class, using multiple `@inmodule` annotations.\nIn order to run this automatically, including the watching of `*.ts` files, [fast-live-reload](https://github.com/bmustiata/fast-live-reload#fast-live-reload) ties things together:\n```\nfast-live-reload -o\\\n    -ep \"bash -c 'tsc -w src/main/core/*.ts --outDir lib/ -d --module commonjs'\"\\\n    lib/ -e \"bash -c 'tsdgen -o terminal-console.d.ts lib/*.d.ts'\"\n```\nAs available in the [live-reload.sh](https://github.com/bmustiata/terminal-console/blob/master/live-reload.sh) script.\nThe tsc compiler will compile the sources into the lib folder, and after the tsdgen will generate the module `.d.ts` file.\n",
  "readmeFilename": "README.md",
  "homepage": "http://blog.ciplogic.com"
}
